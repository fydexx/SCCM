<job id="SaveWinPETpmOwnerAuth">
    <script language="VBScript">
        
' // ***************************************************************************
' // 
' // Copyright (c) Microsoft Corporation.  All rights reserved.
' // 
' // Microsoft BitLocker Administration and Monitoring
' //
' // File:      SaveWinPETpmOwnerAuth.wsf
' // 
' // Purpose:   Save the TPM owner-auth stored in Win PE registry to the machine
' //            registry hive file of the default OS.
' // 
' //
' // Prerequisites:
' //            WinPE 4.0 and higher
' //
' // Usage:     cscript SaveWinPETpmOwnerAuth.wsf
' //              
' //            - Failure in saving WinPE TPM owner-auth will be ignored and not
' //              reported to upper level, i.e. the script always exits with 0.
' //
' //            cscript SaveWinPETpmOwnerAuth.wsf 0
' //            cscript SaveWinPETpmOwnerAuth.wsf False
' //
' //            - Failure in saving WinPE TPM owner-auth will be reported to
' //              upper level, i.e. the script exits with a non-zero error code
' //              on failure.
' //
' // Logs:
' //            Logs are written in SaveWinPETpmOwnerAuth.log, which can be
' //            found at two locations:
' //            - WinPE: %TEMP%
' //            - Default OS: <OS volume>\Windows\temp if the default OS is
' //              detected by the script.
' //            
' //            Note: If the log file cannot be created, then the log messages
' //            will be written to stdout or stderr.
' // 
' // ***************************************************************************


Option Explicit

'// Constants.
Public Const SUCCESS = 0
Public Const INSECURE_OWNER_AUTH = "SieFVUzUzPslub85cadGVioFYHU="
Public Const BCD_BOOTMGR_ID = "{9dea862c-5cdd-4e70-acc1-f32b344d4795}"
Public Const BCD_DEFAULT_BOOTLOADER_ID_TYPE = &h23000003
Public Const BCD_OS_DEVICE_TYPE = &h21000001
Public Const SPECIAL_FOLDER_TEMP = 2
Public Const LOG_FILE_NAME = "SaveWinPETpmOwnerAuth.log"

'// Variables.
Dim iRet                    '// return value
Dim bIgnoreFailure          '// flag indicating if failure will be reported to upper level
Dim oTpm                    '// TPM WMI object
Dim bTpmOwned               '// flag indicating if TPM is owned
Dim sWinPETpmOwnerAuth      '// TPM owner-auth stored in WinPE registry
Dim sDefaultOSDevicePath    '// default OS device path
Dim sLogFilePath            '// log file path
Dim oLogFile                '// log file object
Dim bLogFileReady           '// flag indicating if the log file is ready for writting

'// Prepare the log file.
iRet = PrepareLogFile()
If (iRet <> SUCCESS) Then
    Wscript.StdErr.WriteLine("Failed to prepare the log file. The script will continue running, but no log file will be available." & " Error: " & iRet)
End If

'// Parse command line arguments.
'// 1. bIgnoreFailure - Boolean, Optional, default=True
bIgnoreFailure = True '// defaults to ignore failure
If (Wscript.Arguments.Count() > 0) Then
    bIgnoreFailure = Wscript.Arguments(0)
End If

If (bIgnoreFailure) Then
    LogMessage("Failure in saving WinPE TPM owner-auth will be ignored.")
Else
    LogMessage("Failure in saving WinPE TPM owner-auth will not be ignored.")
End If

'// Find the default OS device path.
iRet = GetDefaultOSDevicePath()
If (iRet <> SUCCESS) Then
    LogMessage("Failed to get the default OS device path." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Default OS device path: " & sDefaultOSDevicePath)
End If

'// Get TPM WMI instance.
iRet = GetTpmInstance()
If (iRet <> SUCCESS) Then
    LogMessage("Failed to get TPM WMI instance." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Succeeded in getting TPM WMI instance.")
End If

'// Check if TPM is owned.
'// Try save WinPE TPM owner-auth only if the TPM is owned.
iRet = oTpm.IsOwned(bTpmOwned)
If (iRet <> SUCCESS) Then
    LogMessage("Failed to check if TPM is owned." & " Error: " & iRet)
    ExitScript(iRet)
ElseIf (bTpmOwned) Then
    LogMessage("TPM is owned, try save WinPE TPM owner-auth to the registry of the default OS.")
Else
    LogMessage("TPM is not owned - There is no owner-auth to save. The script will exit.")
    ExitScript(0)
End If

'// Get WinPE TPM owner-auth.
iRet = oTpm.GetOwnerAuth(sWinPETpmOwnerAuth)
If (iRet <> SUCCESS) Then
    LogMessage("Failed to get WinPE TPM owner-auth." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Succeeded in getting WinPE TPM owner-auth.")
End If

'// If WinPE TPM owner-auth is the insecure one, generate a new one.
If (sWinPETpmOwnerAuth = INSECURE_OWNER_AUTH) Then
    LogMessage("The current WinPE TPM owner-auth is not secure. A new one will be generated.")
    iRet = oTpm.ChangeOwnerAuth("", "")
    If (iRet <> SUCCESS) Then
        LogMessage("Failed to generate a new WinPE TPM owner-auth." & iRet)
        ExitScript(iRet)
    Else 
        '// Get the newly generated WinPE TPM owner-auth.
        iRet = oTpm.GetOwnerAuth(sWinPETpmOwnerAuth)
        If (iRet <> SUCCESS) Then
            LogMessage("Failed to get the newly generated WinPE TPM owner-auth." & " Error: " & iRet)
            ExitScript(iRet)
        Else
            LogMessage("Succeeded in getting the newly generated WinPE TPM owner-auth.")
        End If
    End If
Else
    LogMessage("Succeeded in validating WinPE TPM owner-auth.")
End If

'// Save TPM owner-auth to the system registry hive file on the default OS device.
iRet = SaveOwnerAuthToRegistry(sWinPETpmOwnerAuth, sDefaultOSDevicePath)
if (iRet <> SUCCESS) Then
    LogMessage("Failed to save WinPE TPM owner-auth to the system registry hive of the default OS." & " Error: " & iRet)
    ExitScript(iRet)
Else
    LogMessage("Succeeded in saving WinPE TPM owner-auth to the system registry hive of the default OS.")
End If

ExitScript(0)


'// Helper function to get the error.
Function GetError()
    GetError = "Error: " & Err.number & " " & Err.Description
End Function

'// Helper function to prepare the log file.
Function PrepareLogFile()
    Dim oFileSystem

    On Error Resume Next

    PrepareLogFile = SUCCESS
    bLogFileReady = False

    '// Get the file system object.
    Set oFileSystem = CreateObject("Scripting.FileSystemObject")
    If Err Then 
        Wscript.StdErr.WriteLine("Failed to get the file system object. " & GetError)
        PrepareLogFile = Err.number
        Err.Clear '// not a critical error for the script
        Exit Function
    End If

    '// Get the absolute path to the log file.
    sLogFilePath = oFileSystem.GetSpecialFolder(SPECIAL_FOLDER_TEMP) & "\" & LOG_FILE_NAME
    If Err Then 
        Wscript.StdErr.WriteLine("Failed to get the log file path (%TEMP%\<log_file_name>). " & GetError)
        PrepareLogFile = Err.number
        Err.Clear '// not a critical error for the script
        Exit Function
    End If

    '// Open the log file for writing.
    Set oLogFile = oFileSystem.OpenTextFile(sLogFilePath, 2, True)
    If Err Then 
        Wscript.StdErr.WriteLine("Failed to open the log file for writing. File: " & sLogFilePath & " " & GetError)
        PrepareLogFile = Err.number
        Err.Clear '// not a critical error for the script
        Exit Function
    End If

    bLogFileReady = True
End Function

'// Helper function to log a message.
Function LogMessage(sMessage)
    If (bLogFileReady) Then
        oLogFile.WriteLine(sMessage)
    Else
        Wscript.StdOut.WriteLine(sMessage)
    End If 
End Function

'// Helper function to copy the log file to the TEMP folder of the default OS.
'// The log file is not available for writing at this time, thus all errors will be written to stderr.
Function CopyLogFileToDefaultOS()
    Dim oFileSystem, sOSLogFilePath, oOSLogFile

    On Error Resume Next

    CopyLogFileToDefaultOS = SUCCESS

    If (Not IsEmpty(sDefaultOSDevicePath)) Then
        '// Get the file system object.
        Set oFileSystem = CreateObject("Scripting.FileSystemObject")
        If Err Then
            Wscript.StdErr.WriteLine("Failed to get the file system object. " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If

        '// Open the log file for reading.
        Set oLogFile = oFileSystem.OpenTextFile(sLogFilePath, 1)
        If Err Then
            Wscript.StdErr.WriteLine("Failed to open the log file on WinPE for reading. File: " & sLogFilePath & " " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If

        '// Open the log file on default OS for writing.
        sOSLogFilePath = "\\?\GLOBALROOT" & sDefaultOSDevicePath & "\windows\temp\" & LOG_FILE_NAME
        Set oOSLogFile = oFileSystem.OpenTextFile(sOSLogFilePath, 2, True)
        If Err Then
            Wscript.StdErr.WriteLine("Failed to open the log file on default OS for writting. File: " & sOSLogFilePath & " " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If
            
        oOSLogFile.Write oLogFile.ReadAll
        If Err Then
            Wscript.StdErr.WriteLine("Failed to write the content of the log file on WinPE to default OS. " & GetError)
            CopyLogFileToDefaultOS = Err.number
            Err.Clear '// not a critical error for the script
            Exit Function
        End If
            
        oLogFile.Close
        oOSLogFile.Close
    End If
End Function

'// Helper function to exit the script.
'// The script will exit with 0 or the given error code depending on flag bIgnoreFailure.
Function ExitScript(iRet)
    Dim iMyRet

    On Error Resume Next

    '// Clean up.
    If (bLogFileReady) Then
        oLogFile.Close
        bLogFileReady = False

        '// Copy the log file to default OS. Failure in copying is not considered critical.
        iMyRet = CopyLogFileToDefaultOS()
        If (iMyRet <> SUCCESS) Then
            Wscript.StdErr.WriteLine("Failed to copy the log file from WinPE to default OS." & " Error: " & iMyRet) 
        End If
    End If

    If (bIgnoreFailure) Then
        Wscript.Quit(SUCCESS)
    Else
        Wscript.Quit(iRet)
    End If
End Function

'// Helper function to get the TPM WMI instance.
'// On success, the TPM WMI instance will be stored in variable oTpm.
Function GetTpmInstance()
    Dim sConnection, oTpmWmi, iTpmWmi

    On Error Resume Next

    GetTpmInstance = SUCCESS

    '// Connect to TPM WMI provider.
    sConnection = "winmgmts:{impersonationLevel=impersonate,authenticationLevel=pktPrivacy}!root\cimv2\Security\MicrosoftTpm"
    Set oTpmWmi = GetObject(sConnection)
    If Err Then 
        LogMessage("Failed to connect to TPM WMI provider. " & GetError)
        GetTpmInstance = Err.number
        Exit Function
    End If
        
    '// There should either be 0 or 1 instance of the TPM provider class.
    Set iTpmWmi = oTpmWmi.InstancesOf("Win32_Tpm")
    If iTpmWmi.Count = 0 Then
        LogMessage("Failed to find a TPM WMI instance in the provider class.")
        GetTpmInstance = Err.number
        Exit Function
    End If

    '// Get an instance of the TPM provider class.
    Set oTpm = oTpmWmi.Get("Win32_Tpm=@")
    If Err Then 
        LogMessage("Failed to get the TPM WMI instance. " & GetError)
        GetTpmInstance = Err.number
        Exit Function
    End If
End Function

'// Helper function to get the default OS device path.
'// On success, the default OS device path will be stored in variable sDefaultOSDevicePath.
Function GetDefaultOSDevicePath()
    Dim oBcdStoreClass, oStore, oBootMgr, oDefaultBootLoaderID, oBootLoader, oOSDevice

    On Error Resume Next

    GetDefaultOSDevicePath = SUCCESS

    '// Connect to the BCD store WMI provider.
    Set oBcdStoreClass = GetObject("winmgmts:{(Backup,Restore)}\\.\root\wmi:BcdStore")
    If Err Then 
        LogMessage("Failed to connect to the BCD store WMI provider. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Open the system BCD store.
    oBcdStoreClass.OpenStore "", oStore
    If Err Then 
        LogMessage("Failed to open the system BCD store. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Open the boot manager BCD object.
    oStore.OpenObject BCD_BOOTMGR_ID, oBootMgr
    If Err Then 
        LogMessage("Failed to open the boot manager BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Get the default boot loader ID BCD element from the boot manager BCD object.
    oBootMgr.GetElement BCD_DEFAULT_BOOTLOADER_ID_TYPE, oDefaultBootLoaderID
    If Err Then 
        LogMessage("Failed to get the default boot loader ID BCD element from the boot manager BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Open the default boot loader BCD object.
    oStore.OpenObject oDefaultBootLoaderID.Id, oBootLoader
    If Err Then 
        LogMessage("Failed to open the default boot loader BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    '// Get the OS device BCD element from the default boot loader BCD object.
    oBootLoader.GetElement BCD_OS_DEVICE_TYPE, oOSDevice
    If Err Then 
        LogMessage("Failed to get the OS device BCD element from the default boot loader BCD object. " & GetError)
        GetDefaultOSDevicePath = Err.number
        Exit Function
    End If

    sDefaultOSDevicePath = oOSDevice.Device.Path
End Function

'// Helper function to save a given TPM owner-auth to the system registry hive of a given device.
Function SaveOwnerAuthToRegistry(sOwnerAuth, sDevicePath)
    Dim oShell, iErr, sSystemHivePath

    On Error Resume Next

    SaveOwnerAuthToRegistry = SUCCESS

    Set oShell = CreateObject("Wscript.Shell")
    If Err Then 
        LogMessage("Failed to create Shell object. " & GetError)
        SaveOwnerAuthToRegistry = Err.number
        Exit Function
    End If

    '// Load the system hive of the default OS.
    sSystemHivePath = "\\?\GLOBALROOT" & sDefaultOSDevicePath & "\windows\system32\config\SYSTEM"
    iErr = oShell.Run("reg load HKLM\mbam " & sSystemHivePath, 0, True)
    If (iErr <> SUCCESS) Then
        LogMessage("Failed to load registry hive: " & sSystemHivePath & " Error: " & iErr)
        SaveOwnerAuthToRegistry = iErr
        Exit Function
    End If

    '// Write TPM owner-auth to the proper location in the hive.
    iErr = oShell.Run("reg add HKLM\mbam\ControlSet001\Services\TPM\WMI\Admin /f /v OwnerAuthFull /t REG_SZ /d " & sOwnerAuth, 0, True)
    If (iErr <> SUCCESS) Then
        LogMessage("Failed to save the TPM owner-auth to registry hive: " & sSystemHivePath & " Error: " & iErr)
        SaveOwnerAuthToRegistry = iErr
    End If

    '// Unload the system hive of the default OS.
    iErr = oShell.Run("reg unload HKLM\mbam", 0, True)
    If (iErr <> SUCCESS) Then
        LogMessage("Failed to unload registry hive: " & sSystemHivePath & " Error: " & iErr)
    End If
End Function

    </script>

<signature>
** SIG ** MIIatwYJKoZIhvcNAQcCoIIaqDCCGqQCAQExCzAJBgUr
** SIG ** DgMCGgUAMGcGCisGAQQBgjcCAQSgWTBXMDIGCisGAQQB
** SIG ** gjcCAR4wJAIBAQQQcAVhGs441BGiowAQS9NQkAIBAAIB
** SIG ** AAIBAAIBAAIBADAhMAkGBSsOAwIaBQAEFKGGk0SWMSyh
** SIG ** gW7b8jfu80Iw/hswoIIVgjCCBMMwggOroAMCAQICEzMA
** SIG ** AABxsy6Ka4KqH04AAAAAAHEwDQYJKoZIhvcNAQEFBQAw
** SIG ** dzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
** SIG ** b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
** SIG ** Y3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWlj
** SIG ** cm9zb2Z0IFRpbWUtU3RhbXAgUENBMB4XDTE1MDMyMDE3
** SIG ** MzIwM1oXDTE2MDYyMDE3MzIwM1owgbMxCzAJBgNVBAYT
** SIG ** AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
** SIG ** EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
** SIG ** cG9yYXRpb24xDTALBgNVBAsTBE1PUFIxJzAlBgNVBAsT
** SIG ** Hm5DaXBoZXIgRFNFIEVTTjpCOEVDLTMwQTQtNzE0NDEl
** SIG ** MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
** SIG ** dmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
** SIG ** ggEBAOqRvbKI/RRvITYoA2YzOmYI+1tLpKugKDRKQzII
** SIG ** wIblyT3VJbx7PmKH1n3vD3RTo/GRY4h0f+gkzQNQxfHK
** SIG ** ABZ7pTmwBhw8RH7568SygbwXI7r9ZTgZhX/KoCn99jrA
** SIG ** Cy9o9OA0Tn1vF8Bumar6f2El0SZw0nR932FzXM5UKjlR
** SIG ** AzMJ+FCteMeJCLbUhSo/19gfUerv/GhetcHnB2gyjS9y
** SIG ** Uf4DMUdRxdLrcgevIJX42mr4d2fkYJpwTKtFy34Ir+WB
** SIG ** 1FfPOswTdZ0mzaCiaVC8OoiU37BUON6JOc2GMqWQD36/
** SIG ** 7cyUJaZBhmEmx903flwN6BfKN3/oJLZOtPgbI+sCAwEA
** SIG ** AaOCAQkwggEFMB0GA1UdDgQWBBT4/SOHBZSAVs0zpUHC
** SIG ** bMwINsiyojAfBgNVHSMEGDAWgBQjNPjZUkZwCu1A+3b7
** SIG ** syuwwzWzDzBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
** SIG ** Y3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0
** SIG ** cy9NaWNyb3NvZnRUaW1lU3RhbXBQQ0EuY3JsMFgGCCsG
** SIG ** AQUFBwEBBEwwSjBIBggrBgEFBQcwAoY8aHR0cDovL3d3
** SIG ** dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3Nv
** SIG ** ZnRUaW1lU3RhbXBQQ0EuY3J0MBMGA1UdJQQMMAoGCCsG
** SIG ** AQUFBwMIMA0GCSqGSIb3DQEBBQUAA4IBAQAtBLTKKQtZ
** SIG ** /C7qoK9MTmgE+JLtKcJmzGtwyYfovof8XfTdT6Uab3iX
** SIG ** rWsFOFFBcp055Bobw21x/HC208y2kFgEKD/WHu+DsxQY
** SIG ** DJUL96URE5jGhVZe7jO0DDe1gOr1EmjZLnuGCHI7FHvU
** SIG ** 2dAWT8AvCx8tyuUb0K7phLCPC11zuBaBQCNYLOphqv69
** SIG ** f9ONWnD8ec1mlmVjtQUSduIqOyvtgqya7CdBp5cOIxaf
** SIG ** QchObVMRQATMYJnamOwrrpf74H31uosA9CUXf2J6u1FX
** SIG ** wfDwzZwbYXOtlYwrdiKoq3A4tAEofWZCU96f9Ad8WjAO
** SIG ** ggNZ9oSGuRUlYrAL0s/x25ZFMIIE7DCCA9SgAwIBAgIT
** SIG ** MwAAAQosea7XeXumrAABAAABCjANBgkqhkiG9w0BAQUF
** SIG ** ADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
** SIG ** Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
** SIG ** TWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpN
** SIG ** aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xNTA2
** SIG ** MDQxNzQyNDVaFw0xNjA5MDQxNzQyNDVaMIGDMQswCQYD
** SIG ** VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
** SIG ** A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
** SIG ** IENvcnBvcmF0aW9uMQ0wCwYDVQQLEwRNT1BSMR4wHAYD
** SIG ** VQQDExVNaWNyb3NvZnQgQ29ycG9yYXRpb24wggEiMA0G
** SIG ** CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCS/G82u+ED
** SIG ** uSjWRtGiYbqlRvtjFj4u+UfSx+ztx5mxJlF1vdrMDwYU
** SIG ** EaRsGZ7AX01UieRNUNiNzaFhpXcTmhyn7Q1096dWeego
** SIG ** 91PSsXpj4PWUl7fs2Uf4bD3zJYizvArFBKeOfIVIdhxh
** SIG ** RqoZxHpii8HCNar7WG/FYwuTSTCBG3vff3xPtEdtX3gc
** SIG ** r7b3lhNS77nRTTnlc95ITjwUqpcNOcyLUeFc0Tvwjmfq
** SIG ** MGCpTVqdQ73bI7rAD9dLEJ2cTfBRooSq5JynPdaj7woY
** SIG ** SKj6sU6lmA5Lv/AU8wDIsEjWW/4414kRLQW6QwJPIgCW
** SIG ** Ja19NW6EaKsgGDgo/hyiELGlAgMBAAGjggFgMIIBXDAT
** SIG ** BgNVHSUEDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUif4K
** SIG ** MeomzeZtx5GRuZSMohhhNzQwUQYDVR0RBEowSKRGMEQx
** SIG ** DTALBgNVBAsTBE1PUFIxMzAxBgNVBAUTKjMxNTk1KzA0
** SIG ** MDc5MzUwLTE2ZmEtNGM2MC1iNmJmLTlkMmIxY2QwNTk4
** SIG ** NDAfBgNVHSMEGDAWgBTLEejK0rQWWAHJNy4zFha5TJoK
** SIG ** HzBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1p
** SIG ** Y3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWND
** SIG ** b2RTaWdQQ0FfMDgtMzEtMjAxMC5jcmwwWgYIKwYBBQUH
** SIG ** AQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1p
** SIG ** Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY0NvZFNpZ1BD
** SIG ** QV8wOC0zMS0yMDEwLmNydDANBgkqhkiG9w0BAQUFAAOC
** SIG ** AQEApqhTkd87Af5hXQZa62bwDNj32YTTAFEOENGk0Rco
** SIG ** 54wzOCvYQ8YDi3XrM5L0qeJn/QLbpR1OQ0VdG0nj4E8W
** SIG ** 8H6P8IgRyoKtpPumqV/1l2DIe8S/fJtp7R+CwfHNjnhL
** SIG ** YvXXDRzXUxLWllLvNb0ZjqBAk6EKpS0WnMJGdAjr2/TY
** SIG ** pUk2VBIRVQOzexb7R/77aPzARVziPxJ5M6LvgsXeQBkH
** SIG ** 7hXFCptZBUGp0JeegZ4DW/xK4xouBaxQRy+M+nnYHiD4
** SIG ** BfspaxgU+nIEtwunmmTsEV1PRUmNKRot+9C2CVNfNJTg
** SIG ** FsS56nM16Ffv4esWwxjHBrM7z2GE4rZEiZSjhjCCBbww
** SIG ** ggOkoAMCAQICCmEzJhoAAAAAADEwDQYJKoZIhvcNAQEF
** SIG ** BQAwXzETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmS
** SIG ** JomT8ixkARkWCW1pY3Jvc29mdDEtMCsGA1UEAxMkTWlj
** SIG ** cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
** SIG ** MB4XDTEwMDgzMTIyMTkzMloXDTIwMDgzMTIyMjkzMlow
** SIG ** eTELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
** SIG ** b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
** SIG ** Y3Jvc29mdCBDb3Jwb3JhdGlvbjEjMCEGA1UEAxMaTWlj
** SIG ** cm9zb2Z0IENvZGUgU2lnbmluZyBQQ0EwggEiMA0GCSqG
** SIG ** SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCycllcGTBkvx2a
** SIG ** YCAgQpl2U2w+G9ZvzMvx6mv+lxYQ4N86dIMaty+gMuz/
** SIG ** 3sJCTiPVcgDbNVcKicquIEn08GisTUuNpb15S3GbRwfa
** SIG ** /SXfnXWIz6pzRH/XgdvzvfI2pMlcRdyvrT3gKGiXGqel
** SIG ** cnNW8ReU5P01lHKg1nZfHndFg4U4FtBzWwW6Z1KNpbJp
** SIG ** L9oZC/6SdCnidi9U3RQwWfjSjWL9y8lfRjFQuScT5EAw
** SIG ** z3IpECgixzdOPaAyPZDNoTgGhVxOVoIoKgUyt0vXT2Pn
** SIG ** 0i1i8UU956wIAPZGoZ7RW4wmU+h6qkryRs83PDietHdc
** SIG ** pReejcsRj1Y8wawJXwPTAgMBAAGjggFeMIIBWjAPBgNV
** SIG ** HRMBAf8EBTADAQH/MB0GA1UdDgQWBBTLEejK0rQWWAHJ
** SIG ** Ny4zFha5TJoKHzALBgNVHQ8EBAMCAYYwEgYJKwYBBAGC
** SIG ** NxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQU/dExTtMm
** SIG ** ipXhmGA7qDFvpjy82C0wGQYJKwYBBAGCNxQCBAweCgBT
** SIG ** AHUAYgBDAEEwHwYDVR0jBBgwFoAUDqyCYEBWJ5flJRP8
** SIG ** KuEKU5VZ5KQwUAYDVR0fBEkwRzBFoEOgQYY/aHR0cDov
** SIG ** L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
** SIG ** dHMvbWljcm9zb2Z0cm9vdGNlcnQuY3JsMFQGCCsGAQUF
** SIG ** BwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0cDovL3d3dy5t
** SIG ** aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNyb3NvZnRS
** SIG ** b290Q2VydC5jcnQwDQYJKoZIhvcNAQEFBQADggIBAFk5
** SIG ** Pn8mRq/rb0CxMrVq6w4vbqhJ9+tfde1MOy3XQ60L/svp
** SIG ** LTGjI8x8UJiAIV2sPS9MuqKoVpzjcLu4tPh5tUly9z7q
** SIG ** QX/K4QwXaculnCAt+gtQxFbNLeNK0rxw56gNogOlVuC4
** SIG ** iktX8pVCnPHz7+7jhh80PLhWmvBTI4UqpIIck+KUBx3y
** SIG ** 4k74jKHK6BOlkU7IG9KPcpUqcW2bGvgc8FPWZ8wi/1wd
** SIG ** zaKMvSeyeWNWRKJRzfnpo1hW3ZsCRUQvX/TartSCMm78
** SIG ** pJUT5Otp56miLL7IKxAOZY6Z2/Wi+hImCWU4lPF6H0q7
** SIG ** 0eFW6NB4lhhcyTUWX92THUmOLb6tNEQc7hAVGgBd3TVb
** SIG ** Ic6YxwnuhQ6MT20OE049fClInHLR82zKwexwo1eSV32U
** SIG ** jaAbSANa98+jZwp0pTbtLS8XyOZyNxL0b7E8Z4L5UrKN
** SIG ** MxZlHg6K3RDeZPRvzkbU0xfpecQEtNP7LN8fip6sCvsT
** SIG ** J0Ct5PnhqX9GuwdgR2VgQE6wQuxO7bN2edgKNAltHIAx
** SIG ** H+IOVN3lofvlRxCtZJj/UBYufL8FIXrilUEnacOTj5XJ
** SIG ** jdibIa4NXJzwoq6GaIMMai27dmsAHZat8hZ79haDJLmI
** SIG ** z2qoRzEvmtzjcT3XAH5iR9HOiMm4GPoOco3Boz2vAkBq
** SIG ** /2mbluIQqBC0N1AI1sM9MIIGBzCCA++gAwIBAgIKYRZo
** SIG ** NAAAAAAAHDANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZIm
** SIG ** iZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWlj
** SIG ** cm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBD
** SIG ** ZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDcwNDAzMTI1
** SIG ** MzA5WhcNMjEwNDAzMTMwMzA5WjB3MQswCQYDVQQGEwJV
** SIG ** UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
** SIG ** UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
** SIG ** cmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1T
** SIG ** dGFtcCBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
** SIG ** ggEKAoIBAQCfoWyx39tIkip8ay4Z4b3i48WZUSNQrc7d
** SIG ** GE4kD+7Rp9FMrXQwIBHrB9VUlRVJlBtCkq6YXDAm2gBr
** SIG ** 6Hu97IkHD/cOBJjwicwfyzMkh53y9GccLPx754gd6udO
** SIG ** o6HBI1PKjfpFzwnQXq/QsEIEovmmbJNn1yjcRlOwhtDl
** SIG ** KEYuJ6yGT1VSDOQDLPtqkJAwbofzWTCd+n7Wl7PoIZd+
** SIG ** +NIT8wi3U21StEWQn0gASkdmEScpZqiX5NMGgUqi+YSn
** SIG ** EUcUCYKfhO1VeP4Bmh1QCIUAEDBG7bfeI0a7xC1Un68e
** SIG ** eEExd8yb3zuDk6FhArUdDbH895uyAc4iS1T/+QXDwiAL
** SIG ** AgMBAAGjggGrMIIBpzAPBgNVHRMBAf8EBTADAQH/MB0G
** SIG ** A1UdDgQWBBQjNPjZUkZwCu1A+3b7syuwwzWzDzALBgNV
** SIG ** HQ8EBAMCAYYwEAYJKwYBBAGCNxUBBAMCAQAwgZgGA1Ud
** SIG ** IwSBkDCBjYAUDqyCYEBWJ5flJRP8KuEKU5VZ5KShY6Rh
** SIG ** MF8xEzARBgoJkiaJk/IsZAEZFgNjb20xGTAXBgoJkiaJ
** SIG ** k/IsZAEZFgltaWNyb3NvZnQxLTArBgNVBAMTJE1pY3Jv
** SIG ** c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eYIQ
** SIG ** ea0WoUqgpa1Mc1j0BxMuZTBQBgNVHR8ESTBHMEWgQ6BB
** SIG ** hj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
** SIG ** bC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmww
** SIG ** VAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRw
** SIG ** Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01p
** SIG ** Y3Jvc29mdFJvb3RDZXJ0LmNydDATBgNVHSUEDDAKBggr
** SIG ** BgEFBQcDCDANBgkqhkiG9w0BAQUFAAOCAgEAEJeKw1wD
** SIG ** RDbd6bStd9vOeVFNAbEudHFbbQwTq86+e4+4LtQSooxt
** SIG ** YrhXAstOIBNQmd16QOJXu69YmhzhHQGGrLt48ovQ7DsB
** SIG ** 7uK+jwoFyI1I4vBTFd1Pq5Lk541q1YDB5pTyBi+FA+mR
** SIG ** KiQicPv2/OR4mS4N9wficLwYTp2OawpylbihOZxnLcVR
** SIG ** DupiXD8WmIsgP+IHGjL5zDFKdjE9K3ILyOpwPf+FChPf
** SIG ** wgphjvDXuBfrTot/xTUrXqO/67x9C0J71FNyIe4wyrt4
** SIG ** ZVxbARcKFA7S2hSY9Ty5ZlizLS/n+YWGzFFW6J1wlGys
** SIG ** OUzU9nm/qhh6YinvopspNAZ3GmLJPR5tH4LwC8csu89D
** SIG ** s+X57H2146SodDW4TsVxIxImdgs8UoxxWkZDFLyzs7BN
** SIG ** Z8ifQv+AeSGAnhUwZuhCEl4ayJ4iIdBD6Svpu/RIzCzU
** SIG ** 2DKATCYqSCRfWupW76bemZ3KOm+9gSd0BhHudiG/m4LB
** SIG ** J1S2sWo9iaF2YbRuoROmv6pH8BJv/YoybLL+31HIjCPJ
** SIG ** Zr2dHYcSZAI9La9Zj7jkIeW1sMpjtHhUBdRBLlCslLCl
** SIG ** eKuzoJZ1GtmShxN1Ii8yqAhuoFuMJb+g74TKIdbrHk/J
** SIG ** mu5J4PcBZW+JC33Iacjmbuqnl84xKf8OxVtc2E0bodj6
** SIG ** L54/LlUWa8kTo/0xggShMIIEnQIBATCBkDB5MQswCQYD
** SIG ** VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
** SIG ** A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
** SIG ** IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQg
** SIG ** Q29kZSBTaWduaW5nIFBDQQITMwAAAQosea7XeXumrAAB
** SIG ** AAABCjAJBgUrDgMCGgUAoIG6MBkGCSqGSIb3DQEJAzEM
** SIG ** BgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgor
** SIG ** BgEEAYI3AgEVMCMGCSqGSIb3DQEJBDEWBBQkR6Z/hX2A
** SIG ** UuDmt2W8jmjaBF7mmDBaBgorBgEEAYI3AgEMMUwwSqAs
** SIG ** gCoATQBpAGMAcgBvAHMAbwBmAHQAIABDAG8AcgBwAG8A
** SIG ** cgBhAHQAaQBvAG6hGoAYaHR0cDovL3d3dy5taWNyb3Nv
** SIG ** ZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAAY0rpG85+JT
** SIG ** qGYYS6IJrGneqa8z2suVl0I1Ni30RafwevmHaeKtKDzz
** SIG ** R1mcnSaU7DU0N+PtOoR/6HfxZZiQAq1R81YGegdB0Mgs
** SIG ** y/HreaVTYATnuXfHG5fqG3qOHsfTlSZqSpssJ0ush3OG
** SIG ** 6OEay42M0XsZIabhLP+l2nxz93GGK0epf/KUP89y2zVR
** SIG ** mQVJXsdx+0S8mNU4MGC/S0ojs+bp5h4MUvUdx7h9vwY1
** SIG ** Un76wGSfPJ1dxzvd+3c5jK73NWEMNOTalUPdOfhcP4Je
** SIG ** t7GPEZ7k185TwaQNQwjYG+hTSjEoN9ShapDURCToMsKE
** SIG ** DH2yWwHaBblrEte7v0QVy1GhggIoMIICJAYJKoZIhvcN
** SIG ** AQkGMYICFTCCAhECAQEwgY4wdzELMAkGA1UEBhMCVVMx
** SIG ** EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
** SIG ** ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
** SIG ** dGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFRpbWUtU3Rh
** SIG ** bXAgUENBAhMzAAAAcbMuimuCqh9OAAAAAABxMAkGBSsO
** SIG ** AwIaBQCgXTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcB
** SIG ** MBwGCSqGSIb3DQEJBTEPFw0xNTA3MDYyMDM2MTlaMCMG
** SIG ** CSqGSIb3DQEJBDEWBBQ4BxEaPHVBIHvZ+Q/ZvIATHAXM
** SIG ** 3TANBgkqhkiG9w0BAQUFAASCAQCzZ9fTns873P/gGV5B
** SIG ** MxsxHW3+N1O989pDzM7ZSNbeBDUgWnArg/bFY6A/Q9Ib
** SIG ** j8KrKIoW2HJre60VhycITVLZkJhlZ2c1HyHOhGXDo8HY
** SIG ** nU+A78oiBQRXacbVvAYsOGLo73LeuNGenWqpDcjO9EyH
** SIG ** gUupSC3ory/gqtpy2VGd53di4wFusx2ugg1aaVr3/nXM
** SIG ** gcmk1NqGm+5XP0RIchHEeU4/QGvd9uiM3jX8sK8MarwC
** SIG ** HiOir8D85NtDIgpCDTkFv4vHKo9n/GZd3/y4lE9Kl60C
** SIG ** c+4Xr/HQYL6jr2M5xxgFvUyWiE1Mlxwocd1DgfZVLEb8
** SIG ** vrUAaaj/OujMhEjS
</signature>
</job>